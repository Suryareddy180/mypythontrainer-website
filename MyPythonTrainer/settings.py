"""
Django settings for MyPythonTrainer project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

load_dotenv(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-kg=0duule&)z7(8ib3ax(xa7)2-llv_fb)gob=hz$)q0zx!pc+'
SECRET_KEY = os.getenv('SECRET_KEY', 'your-production-secret-key')
# SECURITY WARNING: don't run with debug turned on in production!

'''# DEBUG = False
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS').split(',')
CSRF_TRUSTED_ORIGINS = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS').split(',')'''

DEBUG = True
ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'MyPythonTrainer',
    'userapp.apps.UserappConfig',
    'topicapp.apps.TopicappConfig',
    'courseapp.apps.CourseappConfig',
    'trainers.apps.TrainersConfig',
    'batchapp.apps.BatchappConfig',
    'studentapp.apps.StudentappConfig',
    'adminapp.apps.AdminappConfig',
    'django_recaptcha',
    'crispy_forms',
    'crispy_bootstrap4',
    'django.contrib.humanize',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'MyPythonTrainer.middleware.RestrictStudentAccessMiddleware',
]

ROOT_URLCONF = 'MyPythonTrainer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MyPythonTrainer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Database configuration (SQLite for development)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('DB_NAME', 'pythontrainer'),
        'USER': os.environ.get('DB_USER', 'root'),
        'PASSWORD': os.environ.get('DB_PASSWORD', '@Surya123'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),  # Default to 'localhost'
        'PORT': os.environ.get('DB_PORT', '3306'),  # Default MySQL port
    }
}
AUTH_USER_MODEL = 'userapp.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# [TBD] - Change for Prod
RAZORPAY_KEY_ID = os.environ.get('RZP_KEY_ID')
RAZORPAY_KEY_SECRET = os.environ.get('RZP_KEY_SECRET')

# [TBD] - Change for Prod
RECAPTCHA_PUBLIC_KEY = os.environ.get('RECAPTCHA_PUB_KEY')
RECAPTCHA_PRIVATE_KEY = os.environ.get('RECAPTCHA_PRIV_KEY')

if DEBUG:
    RECAPTCHA_PUBLIC_KEY = '6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI'
    RECAPTCHA_PRIVATE_KEY = '6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe'

SILENCED_SYSTEM_CHECKS = ['django_recaptcha.recaptcha_test_key_error']

SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin-allow-popups"
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Internationalization settings
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static and media file settings
#STATIC_URL = '/static/'
STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

TIME_ZONE = 'UTC'
# Messages and crispy forms
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'
CRISPY_TEMPLATE_PACK = 'bootstrap4'

USE_I18N = True
# Authentication settings
LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = 'userapp:login'

USE_TZ = True
# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Default, stores sessions in the database

# SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7  # One week
# SESSION_COOKIE_AGE = 60   # One week
SESSION_COOKIE_SECURE = False # Set to True for HTTPS only, False for local development
SESSION_COOKIE_HTTPONLY = True # Save the session to the database on every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False # Session will not expire when the browser is closed
SESSION_SAVE_EVERY_REQUEST = True # Save the session to the database on every request

# messages
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'

# crispy forms
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Email backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_HOST = os.environ.get('ENV_SMTP_HOST')
EMAIL_PORT = os.environ.get('ENV_SMTP_PORT')
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('ENV_SMTP_USER')
EMAIL_HOST_PASSWORD = os.environ.get('ENV_SMTP_PASS')
DEFAULT_FROM_EMAIL = os.environ.get('ENV_DEFAULT_FROM_EML')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
#STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
